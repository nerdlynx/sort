using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        

        static void Main(string[] args)
        {
            StartArray StartArray = new StartArray();

            StartArray.Start();
            Console.ReadKey();
        }
    }
}

class StartArray {
    public List<int> startArray = new List<int>();

    public List<List<Node>> NodeArray = new List<List<Node>>();
    public void Start()
    {

        Console.WriteLine("Введите цифру ");
        startArray.Add(Convert.ToInt32(Console.ReadLine()));

        Console.WriteLine("Добавить еще цифру? (Y/N) ");
        string y = Console.ReadLine();
        if (y == "Y" || y == "y" || y == "н" || y == "Н")
        {
            Start();
        }
        else
        {
            Console.WriteLine("Добовление закончен. Массив содержит " + startArray.Count + " эллементов ");
            string arrayPrint = "{";
            for (int i = 0; i < startArray.Count; i++)
            {
                if (i == 0)
                {
                    arrayPrint += startArray[i];
                }
                else
                {
                    arrayPrint += "," + startArray[i];
                }

            }
            arrayPrint += "}";

            Console.WriteLine(arrayPrint );

            Console.WriteLine("Начинаю сортировку ");
            trees();
        }

    }
    int startArrayId = 0;
    void trees()
    {

        if (NodeArray.Count == 0)
        {
            // Создаем первое дерево
            NodeArray.Add(new List<Node>());
         
        }

        for (int i = 0; i < NodeArray.Count; i++)
        {
            if (NodeArray[i].Count == 0)
            {
                NodeArray[i].Add(new Node(startArray[startArrayId]));

                NodeArray[i][0].idDerevo = i;
                NodeArray[i][0].idElement = 0;

              
            }
            else
            {
                if (i != 0 && (NodeArray[i-1].Count + NodeArray[i].Count == 2 || NodeArray[i - 1].Count + NodeArray[i].Count == 4 || NodeArray[i - 1].Count + NodeArray[i].Count == 8 || NodeArray[i - 1].Count + NodeArray[i].Count == 14 || NodeArray[i - 1].Count + NodeArray[i].Count == 24 || NodeArray[i - 1].Count + NodeArray[i].Count == 40))
                {
                   


                    int countLeftChild = NodeArray[i - 1].Count - 1;

                    

                    for (int j = 0; j < NodeArray[i].Count; j++)
                    {
                        NodeArray[i - 1].Add(NodeArray[i][j]);
                        NodeArray[i - 1][NodeArray[i - 1].Count - 1].idDerevo = i - 1;
                        NodeArray[i - 1][NodeArray[i - 1].Count - 1].idElement = NodeArray[i - 1].Count-1;
                    }

                    NodeArray[i - 1].Add(new Node(startArray[startArrayId]));
                    NodeArray[i - 1][NodeArray[i - 1].Count - 1].childLeft = NodeArray[i - 1][countLeftChild];
                    NodeArray[i - 1][countLeftChild].Patent = NodeArray[i - 1][NodeArray[i - 1].Count - 1];

                    NodeArray[i - 1][NodeArray[i - 1].Count - 1].childRight = NodeArray[i - 1][NodeArray[i - 1].Count - 2];
                    NodeArray[i - 1][NodeArray[i - 1].Count - 2].Patent = NodeArray[i - 1][NodeArray[i - 1].Count - 1];


                    NodeArray[i - 1][NodeArray[i - 1].Count - 1].idDerevo = i - 1;
                    NodeArray[i - 1][NodeArray[i - 1].Count - 1].idElement = NodeArray[i - 1].Count - 1;

                   

                    NodeArray.RemoveAt(i);

                    sorting(i - 1, NodeArray[i - 1].Count - 1);
                    


                }
                else if(i ==  (NodeArray.Count -1) )
                {
                    NodeArray.Add(new List<Node>());

                    
                }
             
            }
        }


        startArrayId ++;
        if (startArrayId < startArray.Count)
        {
            trees();
        }
        else
        {

             renderNewArray();

           // Console.WriteLine(NodeArray[9999999]);
        }
     


    }
    
    void sorting(int  x, int y)
    {
       if (NodeArray[x][y].childLeft != null)
       {
            if (NodeArray[x][y].thisElement < NodeArray[x][y].childLeft.thisElement)
            {

               
                int aEl = NodeArray[x][y].thisElement;
                NodeArray[x][y].thisElement = NodeArray[x][y].childLeft.thisElement;
                NodeArray[x][y].childLeft.thisElement = aEl;

                sorting(NodeArray[x][y].childLeft.idDerevo, NodeArray[x][y].childLeft.idElement);
            }
       }

        if (NodeArray[x][y].childRight != null)
        {
            if (NodeArray[x][y].thisElement < NodeArray[x][y].childRight.thisElement)
            {
              
                int aEl = NodeArray[x][y].thisElement;
                NodeArray[x][y].thisElement = NodeArray[x][y].childRight.thisElement;
                NodeArray[x][y].childRight.thisElement = aEl;

                sorting(NodeArray[x][y].childRight.idDerevo, NodeArray[x][y].childRight.idElement);
            }
        }
    }
    
    string Rez;

    Node MaxLeft = null;

     string forNode(Node ThisNode)
     {
        String rezDerevo = ThisNode.thisElement.ToString() + " \n {";
        if (ThisNode.childRight != null)
        {
            rezDerevo += forNode(ThisNode.childRight) + ", ";
            rezDerevo += forNode(ThisNode.childLeft);
        }
        else
        {
            rezDerevo += "null, null ";
            
        }
        rezDerevo += " } \n";
        return rezDerevo;

     }

    void renderNewArray()
    {



        for (int i = 0; i < NodeArray.Count; i++)
        {
            int idStartEl = NodeArray[i].Count - 1;
            for (int j = 0; j < NodeArray[i].Count; j++)
            {

                if (NodeArray[i][j].Patent == null)
                {
                    idStartEl = NodeArray[i][j].idElement;
                }

            }
            Console.Write("Деврево: " + i + " { " + forNode(NodeArray[i][idStartEl]) + " } \n");


        }
        bool maxel = false;
        int maxElement = 0;
        int maxElementid = 0;
        int maxElementDerevo = 0;

        for (int i = 0; i < NodeArray.Count; i++)
        {
            for (int j = 0; j < NodeArray[i].Count; j++)
            {
                if(NodeArray[i][j].Patent == null)
                {   

                    if(maxel == false || NodeArray[i][j].thisElement > maxElement)
                    {
                        maxel = true;
                        maxElement = NodeArray[i][j].thisElement;
                        maxElementid = NodeArray[i][j].idElement;
                        maxElementDerevo = i;
                    }
                    else
                    {
                        NodeArray[maxElementDerevo][maxElementid].thisElement = NodeArray[i][j].thisElement;
                        NodeArray[i][j].thisElement = maxElement;
                        sorting(maxElementDerevo, j);
                        maxElementid = j;
                        maxElementDerevo = i;

                    }
                }


            }


        }



 
        maxel = false;
         maxElement = 0;
         maxElementid = 0;
         maxElementDerevo = 0;

        for (int i = 0; i < NodeArray.Count; i++)
        {
            for (int j = 0; j < NodeArray[i].Count; j++)
            {
                if (NodeArray[i][j].Patent == null)
                {

                    if (maxel == false || NodeArray[i][j].thisElement > maxElement)
                    {
                        maxel = true;
                        maxElement = NodeArray[i][j].thisElement;
                        maxElementid = NodeArray[i][j].idElement;
                        maxElementDerevo = i;
                    }
                    
                }


            }


        }


        
       

        Node childidRight = null;
        if (NodeArray[maxElementDerevo][maxElementid].childRight != null)
        {
            childidRight = NodeArray[maxElementDerevo][maxElementid].childRight;
            NodeArray[maxElementDerevo][maxElementid].childLeft.Patent = null;
        }

      

        NodeArray[maxElementDerevo].RemoveAt(maxElementid);
        if(NodeArray[maxElementDerevo].Count == 0)
        {
            NodeArray.RemoveAt(maxElementDerevo);
        }


        if (childidRight != null)
        {
          
            NodeArray.Add(new List<Node>());

            NodeArray[NodeArray.Count - 1].Add(childidRight);
            NodeArray[childidRight.idDerevo].RemoveAt(childidRight.idElement);
            NodeArray[NodeArray.Count - 1][NodeArray[NodeArray.Count - 1].Count - 1].Patent = null;

            NodeArray[NodeArray.Count - 1][NodeArray[NodeArray.Count - 1].Count - 1].idDerevo = NodeArray.Count - 1;

            NodeArray[NodeArray.Count - 1][NodeArray[NodeArray.Count - 1].Count - 1].idElement = NodeArray[NodeArray.Count - 1].Count - 1;

            
             
        }


       
       

        if (NodeArray.Count > 0)
        {
            renderNewArray();
        }
        else
        {
            sort();
            for (int i = 0; i < startArray.Count; i++)
            {
                Console.Write(startArray[i] + " ");
            }
        }



    }

    Node breakup(int idDerevo, int idElement, int NewidDerevo)
    {



    
        NodeArray[NewidDerevo].Add(new Node(NodeArray[idDerevo][idElement].thisElement));

        NodeArray[idDerevo].RemoveAt(idElement);

        NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count-1].idDerevo = NewidDerevo;
        NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count - 1].idElement = NodeArray[NewidDerevo].Count - 1;

        int thisidel = NodeArray[NewidDerevo].Count - 1;

        if (NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count - 1].childRight != null)
        {
            NodeArray[NewidDerevo][thisidel].childRight =  breakup(NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count - 1].childRight.idDerevo, NodeArray[idDerevo][idElement].childRight.idElement, NewidDerevo);


           
        }

        if (NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count - 1].childLeft != null)
        {
            NodeArray[NewidDerevo][thisidel].childLeft = breakup(NodeArray[NewidDerevo][NodeArray[NewidDerevo].Count - 1].childLeft.idDerevo, NodeArray[idDerevo][idElement].childLeft.idElement, NewidDerevo);
        }

        return NodeArray[NewidDerevo][thisidel];



    }

    void sort()
    {
        int min, temp;
        int length = startArray.Count;

        for (int i = 0; i < length - 1; i++)
        {
            min = i;

            for (int j = i + 1; j < length; j++)
            {
                if (startArray[j] < startArray[min])
                {
                    min = j;
                }
            }

            if (min != i)
            {
                temp = startArray[i];
                startArray[i] = startArray[min];
                startArray[min] = temp;
            }
        }




    }


}



class Node
{
    public int thisElement;
    public Node childLeft = null;
    public Node childRight = null;
    public Node Patent = null;

    public int idDerevo;
    public int idElement;
   
    public Node(int _thisElement)
    {
        thisElement = _thisElement;
       
    }
}
